AWSTemplateFormatVersion: 2010-09-09
Description: 'Appendix1 cloudformation. IAM group and user, password policy and CloudTrail.'
Parameters:
  AdminUserName:
    Type: String
    Description: Admin name
    Default: sbcntr-user
  InitialIAMPassword:
    Type: String
    Description: Initial login password
    NoEcho: true
Resources:
  # CloudTrail용 KMS 키 생성
  cloudtrailKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-cloudtrail
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: 'kms:GenerateDataKey*'
            Resource: '*'
            Condition:
              StringLike:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'
          - Sid: Allow CloudTrail to describe key
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow principals in the account to decrypt log files
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Decrypt'
              - 'kms:ReEncryptFrom'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Sub '${AWS::AccountId}'
              StringLike:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'
          - Sid: Allow alias creation during setup
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'kms:CreateAlias'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': ec2.region.amazonaws.com
                'kms:CallerAccount': !Sub '${AWS::AccountId}'
          - Sid: Enable cross account log decryption
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Decrypt'
              - 'kms:ReEncryptFrom'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Sub '${AWS::AccountId}'
              StringLike:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*'

  cloudtrailKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/cloudtrail
      TargetKeyId:
        Ref: cloudtrailKey

  # CloudTrail을 저장할 S3 암호화 키용 KSM 키 생성
  s3cloudtrailKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-cloudtrails3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow VPC Flow Logs to use the key
            Effect: Allow
            Principal:
              Service:
                - delivery.logs.amazonaws.com
            Action: 'kms:GenerateDataKey*'
            Resource: '*'

  s3cloudtrailKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/cloudtrails3
      TargetKeyId:
        Ref: s3cloudtrailKey

  # CloudTrail용 S3 버킷 생성
  CloudTrailS3Bucket:
    DependsOn:
        - s3cloudtrailKey
        - s3cloudtrailKeyAlias
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${s3cloudtrailKeyAlias}'
            SSEAlgorithm: 'aws:kms'
  # CloudTrail용 S3 버킷 정책 생성
  CloudTrailBucketPolicy:
    DependsOn:
        - CloudTrailS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:GetBucketAcl"
            Resource: !Sub arn:aws:s3:::${CloudTrailS3Bucket}
          - Sid: "AWSCloudTrailWrite"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${CloudTrailS3Bucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  # CloudTrail 활성화
  MyCloudTrail:
    DependsOn:
      - CloudTrailS3Bucket
      - CloudTrailBucketPolicy
      - cloudtrailKey
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: !Ref CloudTrailS3Bucket
      IsLogging: true
      IsMultiRegionTrail: true
      IncludeGlobalServiceEvents: true
      KMSKeyId: !GetAtt cloudtrailKey.Arn

  # 패스워드 정책 생성 Lambda용 IAM 역할 및 정책 생성
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'iam:UpdateAccountPasswordPolicy'
            - 'iam:DeleteAccountPasswordPolicy'
            Resource: '*'
  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref LambdaRole
      PolicyName: lambda
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: !GetAtt 'LambdaLogGroup.Arn'

  # 패스워드 정책 생성 Lambda
  LambdaFunctionV2: 
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const response = require('cfn-response');
          const iam = new AWS.IAM({apiVersion: '2010-05-08'});
          exports.handler = (event, context, cb) => {
            console.log(`Invoke: ${JSON.stringify(event)}`);
            function done(err) {
              if (err) {
                console.log(`Error: ${JSON.stringify(err)}`);
                response.send(event, context, response.FAILED, {});
              } else {
                response.send(event, context, response.SUCCESS, {});
              }
            }
            if (event.RequestType === 'Delete') {
              iam.deleteAccountPasswordPolicy({}, done);
            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              const params = {
                MinimumPasswordLength: parseInt(event.ResourceProperties.MinimumPasswordLength, 10),
                RequireSymbols: event.ResourceProperties.RequireSymbols === 'true',
                RequireNumbers: event.ResourceProperties.RequireNumbers === 'true',
                RequireUppercaseCharacters: event.ResourceProperties.RequireUppercaseCharacters === 'true',
                RequireLowercaseCharacters: event.ResourceProperties.RequireLowercaseCharacters === 'true',
                AllowUsersToChangePassword: event.ResourceProperties.AllowUsersToChangePassword === 'true',
                HardExpiry: event.ResourceProperties.HardExpiry === 'true'
              };
              if (parseInt(event.ResourceProperties.MaxPasswordAge, 10) > 0) {
                params.MaxPasswordAge = parseInt(event.ResourceProperties.MaxPasswordAge, 10);
              }
              if (parseInt(event.ResourceProperties.PasswordReusePrevention, 10) > 0) {
                params.PasswordReusePrevention = parseInt(event.ResourceProperties.PasswordReusePrevention, 10);
              }
              iam.updateAccountPasswordPolicy(params, done);
            } else {
              cb(new Error(`unsupported RequestType: ${event.RequestType}`));
            }
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs12.x'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionV2}'
      RetentionInDays: 14
  PasswordPolicy:
    Type: 'Custom::PasswordPolicy'
    DependsOn:
    - LambdaLogGroup
    - LambdaPolicy
    Version: '1.0'
    Properties:
      AllowUsersToChangePassword: true
      # CIS AWS Foundations 1.5
      RequireUppercaseCharacters: true
      # CIS AWS Foundations 1.6
      RequireLowercaseCharacters: true
      # CIS AWS Foundations 1.7
      RequireSymbols: true
      # CIS AWS Foundations 1.8
      RequireNumbers: true
      # CIS AWS Foundations 1.9
      MinimumPasswordLength: 14
      # CIS AWS Foundations 1.10 
      PasswordReusePrevention: 24
      # CIS AWS Foundations 1.11
      HardExpiry: true
      MaxPasswordAge: 90
      ServiceToken: !GetAtt 'LambdaFunctionV2.Arn'
      
  # IAM그룹 생성
  IAMGroupAdmin:
    Type: AWS::IAM::Group
    DeletionPolicy: Retain
    Properties:
      GroupName: Administrator
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  
  # 이 책에서 이용할 실습용 이용자 생성
  IAMSbcntrContainerHandsonUser:
    DependsOn:
      - IAMGroupAdmin
    Type: AWS::IAM::User
    DeletionPolicy: Retain
    Properties:
      UserName: !Ref AdminUserName
      Groups: 
        - !Ref IAMGroupAdmin
      LoginProfile:
        Password: !Ref InitialIAMPassword
        PasswordResetRequired: true

# 
Outputs:
    CloudTrailKMSKeyAlias:
        Value:
            Ref: 'cloudtrailKeyAlias'
    S3KMSKeyAlias:
        Value:
            Ref: 's3cloudtrailKeyAlias'
    CloudTrailS3Bucket:
        Value:
            Ref: 'CloudTrailS3Bucket'
    CloudTrailS3BucketPolicy:
        Value:
            Ref: 'CloudTrailBucketPolicy'
    CloudTrail:
        Value:
            Ref: 'MyCloudTrail'
